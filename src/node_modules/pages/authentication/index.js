import React, {useState, useEffect} from 'react';
import {Link, Redirect} from 'react-router-dom';
import useFetch from 'hooks/useFetch'
import useLocalStorage from 'hooks/useLocalStorage'

const Authentication = (props) => {
    const isLogin = props.match.path === '/login'
    const pageTitle = isLogin ? 'Sign in' : 'Sign up'
    const descText = isLogin ? 'Need an account?' : 'Have an account?'
    const descUrl = isLogin ? '/register' : '/login'
    const apiUrl = isLogin ? 'users/login' : 'users'
    const [email, setEmail] = useState('')
    const [username, setUsername] = useState('')
    const [password, setPassword] = useState('')
    const [isSuccessfulSubmit, setIsSuccessfulSubmit] = useState(false)
    const [{isLoading, response, error}, doFetch] = useFetch(apiUrl)
    const [token, setToken] = useLocalStorage('token')
    console.log('token', token)

    // console.log('useFetch', isLoading, response, error)
    // console.log(props)

    const handleSubmit = (event) => {
        event.preventDefault();
        const user = isLogin ? {email, password} : {email, password, username}
        doFetch({
            method: 'post',
            data: {
                user
            }
        })
        // console.log('Response', isLoading, response, error)
    }

    useEffect(() => {
        if(!response){
            return;
        }
        // console.log('response', response)
        setToken(response.user.token)
        setIsSuccessfulSubmit(true)
    }, [response])

    if(isSuccessfulSubmit){
        return <Redirect to="/" />
    }
    
    return ( 
    <div className="auth-page">
        <div className="container page">
            <div className="row">
                <div className="col-md-6 offset-md-3 col-xs-12">
                    <h1 className="text-xs-center">{pageTitle}</h1>
                    <p className="text-xs-center">
                        <Link to={descUrl}>{descText}</Link>
                    </p>
                    <form onSubmit={handleSubmit}>
                        <fieldset>
                            {!isLogin && (<fieldset className="form-group">
                                <input type="text" className="form-control form-control-lg" placeholder="Username" value={username} onChange={e => setUsername(e.target.value)}/>
                            </fieldset>)}
                            <fieldset className="form-group">
                                <input type="email" className="form-control form-control-lg" placeholder="Email" value={email} onChange={e => setEmail(e.target.value)}/>
                            </fieldset>
                            <fieldset className="form-group">
                                <input type="password" className="form-control form-control-lg" placeholder="Password" value={password} onChange={e => setPassword(e.target.value)}/>
                            </fieldset>
                            <button 
                            disabled={isLoading}
                            className="btn btn-lg btn-primary pull-xs-right" 
                            type="submit">{pageTitle}</button>
                        </fieldset>
                    </form>
                </div>
            </div>
        </div>
    </div> );
}
 
export default Authentication;